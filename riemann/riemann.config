; -*- mode: clojure; -*-
; vim: filetype=clojure

(logging/init {:file "/var/log/riemann/riemann.log"})

; (require 'riemann.client)
(require '[example.etc.email :refer :all])
(require '[example.etc.graphite :refer :all])

(let [host "riemann"]
  (repl-server {:host "127.0.0.1"})
  (ws-server   {:host host})
  (tcp-server  {:host host})
  (tcp-server  {:host host
                :tls? true
                :key "/usr/local/etc/riemann/ssl/riemann.pkcs8"
                :cert "/usr/local/etc/riemann/ssl/riemann.crt"
                :ca-cert "/usr/local/etc/riemann/ssl/ca.crt"})
  (udp-server  {:host host}))

(periodically-expire 10 {:keep-keys [:host :service :tags]})

(let [index (index)]

  (streams
    (default :ttl 60
      ; Index all events immediately.
      (where (not (tagged "notification"))
        index)

      (tagged "collectd"
        (tagged "notification"
          (changed-state {:init "ok"}
            #(info %)
            (email "alerts@example.com")))

        ; (where (and (expired? event)
        ;             (service #"^processes-.+\/ps_count\/processes"))
        ;   #(info %)
        ;   (email "alerts@example.com"))
        )

      (where (and (expired? event)
                  (not (service #"^openvpn")))
        (throttle 5 3600
          #(info %)
          (email "alerts@example.com")))

      ; Send all events to the log file.
      ; #(info %)
      
      ; (where (service #"^riemann.*")
      graph)))
